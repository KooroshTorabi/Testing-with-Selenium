# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.firefox import GeckoDriverManager

from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

import xlwt
import csv

from selenium.webdriver.firefox.service import Service as FirefoxService
# allbooks = ["9780316290234", "9780316291163", "9780399501487", "9780451457813", "9780671035778", "9780862415495", "9781250112422", "646525020378", "050694007991", "070999007991", "9781101965610", "9781400049622", "9780142001431", "9780143115007", "9780670021048", "9780670018215", "9780670033355", "9780670033355", "9780679727125", "9780316385916", "9780345342966", "076783007505", "9780553278224", "9780394513355", "9781509823390", "9781934781531", "9781862071551", "9780062349408", "9780747553274", "9780670856046", "9780099529040", "9780802170910", "9780307476111", "9781400031665", "9781400047468", "9781481414432", "9781101875049", "9780812995664", "9781400063567", "9780425238691", "9781847676573", "9780446578196", "9780312423087", "9780812969658", "9781473222366", "9780345444059", "071162020014", "9781565126145", "9780062792358", "9780062073969", "9781786818249", "9781250065292", "9780525954309", "9780345441409", "646525020378", "9780007149827", "9780007149827", "9780061493348", "9780062225559", "9780395345306", "9780679728894", "9780062313126", "9780765303882", "9780399591556", "9780571231508", "9780679440086", "9780765342294", "9780375758621", "071162004502", "9781400096916", "9780679720201", "9780393341775", "9780156453806", "9780679735908", "646525020378", "9780679723226", "9780679723219", "9780679751342", "9780679742272", "9780679742562", "9780679735908", "9780679405139", "9780375415340", "9780385720977", "639277694386", "9780385492232", "9781402294150", "9781571310910",
#             "9781250083258", "9780743211697", "9781501182143", "646525020378", "9780375709104", "9780307389251", "9780061624773", "9780393316001", "9780679736097", "9780312275433", "646525020378", "099455006996", "099455007993", "9780060182977", "9781933372600", "9781933372600", "646525020378", "9780547549101", "000000133", "9780316056199", "9780385352871", "9781416554844", "9780374158460", "9780553211375", "9780760719435", "9780517189184", "9780061670879", "9781524797805", "9781101985014", "9780140147551", "9780140168846", "9780771025846", "9780385524940", "9780440000785", "9780374279868", "639277697790", "9780374172893", "9780525432623", "9781590514344", "9780345504968", "9781845880279", "9781582344157", "9781597802017", "9780765319234", "9780062358202", "9780316158466", "9789911467287", "9780062851802", "9780002008075", "297023046400130000000040", "9780140074482", "9780307887443", "9780812988024", "9781451618495", "9781501124389", "9781250086624", "9780156007474", "9781554688326", "9780812978186", "9780679447832", "9781400062041", "9780765323118", "646529160018", "9780060915186", "9780060915414", "9780060915438", "9780060915445", "9780060915452", "9780062432964", "9780061233326", "9780143126683", "9780192545190", "9781853262326", "9781853261947", "9781853260520", "9780460876827", "9780486406510", "9780142196588", "9780062281227", "9780140077025", "9780140077025", "639277694386", "9780743212212", "9780684864211", "9781566894883", "9781439199367", "9781864486797", "9780802142818", "9780767908191"]
file = open("allbooks.csv")
csvreader = csv.reader(file)
header = next(csvreader)
print(header)
allbooks = []
for row in csvreader:
    allbooks.append(row[0])
print(allbooks)
file.close()

bookdata = []

# open the file for error logging
f = open('error_book_codes.csv', 'w')
# create the csv writer
writer = csv.writer(f)


# allbooks = []
# opts = webdriver.ChromeOptions()
# opts.headless = True
# assert opts.headless
# service = FirefoxService(executable_path=GeckoDriverManager().install())
# driver = webdriver.Firefox(service=service)

# options = webdriver.ChromeOptions()
# options.add_argument("start-maximized")

options = webdriver.ChromeOptions()
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option('useAutomationExtension', False)
options.add_argument("--disable-blink-features=AutomationControlled")
# options.add_argument("start-maximized")
# options.add_argument("disable-infobars")
# options.add_argument("--disable-extensions")
# driver = webdriver.Chrome(
#     './chromedriver_linux64/chromedriver', options=options)
driver = webdriver.Chrome(options=options, service=Service(
    ChromeDriverManager().install()))
# driver = webdriver.Chrome('./chromedriver_linux64/chromedriver')

vars = {}
workbook = xlwt.Workbook()
worksheet1 = workbook.add_sheet('Test')
worksheet1.write(0, 0, 'Title')
worksheet1.write(0, 1, 'Author')
worksheet1.write(0, 2, 'Description')
worksheet1.write(0, 3, 'image path')
i = 1
for book in allbooks:
    print("=======>>>>>> : ", book)
    driver.get("https://bookshop.org/")
    driver.set_window_size(1848, 1080)
    time.sleep(4)
    try:
        driver.set_window_size(1848, 1080)
        driver.find_element(By.NAME, "keywords").click()
        driver.find_element(By.NAME, "keywords").send_keys(book)
        driver.find_element(By.CSS_SELECTOR, ".is-secondary > img").click()
        driver.find_element(By.CSS_SELECTOR, ".product-image").click()
        time.sleep(2)
        # driver.find_element(By.LINK_TEXT, "978-6-8493-0196-6").click(
        # ),    driver.find_element(By.CSS_SELECTOR, ".title-description").click()
        Title = driver.find_element(By.CSS_SELECTOR, ".h1.leading-tight.mb-2")
        Author = driver.find_element(
            By.CSS_SELECTOR, ".text-secondary > span > span")
        with open(book+'.jpg', 'wb') as file:
            BookImage = driver.find_element(
                By.ID, "main\-image").find_element(By.CSS_SELECTOR, "div > a > img")
            file.write(BookImage.screenshot_as_png)
        Description = driver.find_element(
            By.CSS_SELECTOR, ".title-description")

        print("\n\r\n\r\n\r===============================================================\n\r\n\r\n\r")
        print("Title : ", Title.text)
        print("\n\rBookImage.src : ", BookImage.get_attribute("src"))
        print("\n\rAuthor : ", Author.text)
        print("\n\rDescription : \n\r", Description.text)
        print("\n\r\n\r\n\r-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n\r\n\r\n\r")
        # worksheet1.insert_bitmap_data(fo.getvalue(), 0, 0)
        worksheet1.write(i, 0, Title.text)
        worksheet1.write(i, 1, Author.text)
        worksheet1.write(i, 2, Description.text)
        worksheet1.write(i, 3, BookImage.get_attribute("src"))
        i += 1
    except Exception as e:
        print(e)
        # write a row to the csv file
        writer.writerow([book])
        print("\n\r\ error in : ", book, "n\r\n\r")

    driver.get("https://bookshop.org/")
    # time.sleep(960)
    # driver.find_element(
    #     By.CSS_SELECTOR, "#main-image > .reletive > .block > .w-full").click()
# time.sleep(60)
workbook.save('bookdata.xls')

driver.quit()
# close the file
f.close()
